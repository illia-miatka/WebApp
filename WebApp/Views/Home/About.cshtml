@{
    ViewBag.Title = "About";
}
<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Message</h3>
<hr />
<h4>BSA 16 .NET - ASP.Net MVC:</h4>
<pre>
Создать сайт прогноза погоды.
В качестве источника данных использовать сторонний сервис OpenWeatherMap. (API<a href="http://www.openweathermap.com/api">API</a>).

Пример запроса для получения прогноза на неделю: <a href="url">http//api.openweathermap.org/data/2.5/forecast/daily?q={city}&units=metric&APPID={APIKEY}</a>  (Для получения собственного APIKEY достаточно бесплатно зарегистрироваться на сайте сервиса)

Разрабатываемый сайт должен соответствовать следующим основным критериям:
Пользователь должен иметь возможность выбрать город из имеющегося списка предустановленных городов: Киев, Львов, Харьков, Днепропетровск, Одесса;
Пользователь должен иметь возможность получить прогноз погоды в любом произвольном городе;
Пользователь должен иметь возможность просматривать прогноз на сегодняшний день, на три дня и на ближайшие 7 дней;
Рекомендации:
  для работы с JSON рекомендуется использовать пакет NewtoneJSON из Nuget'a;
  для автогенерации классов C# по имеющимуся JSON-объекту можно использовать сервис <a href="url">http://json2csharp.com/</a>
  не лишним будет использовать инфографику для наглядного отображения прогноза погоды, для поиска иконок можно воспользоваться сервисом <a href="url">https://www.iconfinder.com/</a></pre>
<hr />
<h4>Inversion of Control. Dependecy Injection:</h4>
<pre>
На основе выполненного ДЗ из первой лекции (ASP.Net MVC). 
Прикрутить Ninject к имеющемуся веб-приложению</pre>
<hr />
<h4>BSA 16 .NET - Entity Framework 6.0:</h4>
<pre>
На основе выполненного ДЗ к имеющемуся веб-приложению добавить возможность добавления, удаления, обновления списка избранных городов. 
Добавить страницу которая отображает историю запросов пользователя по городам.</pre>
<hr/>
<h4>BSA 16 .NET - Async propramming C#:</h4>
<pre>
    Для MVC проекта из предыдущего домашнего задания, к серверной части добавить использование async/await для асинхронного обращения к стороннему сервису. Таски прокидывать по всей цепочке, вплоть до методов контроллера. Желательно не использовать Wait(), Result и прочие методы, которые блокируют поток. Аналогично сделать обращения к базе данных асинхронными (EF предоставляет для этого API).</pre>
<hr/>
